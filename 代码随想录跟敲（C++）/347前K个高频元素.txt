//å †
class Solution 
{
public:
    class cmp
    {
    public:
        bool operator()(const pair<int, int>& m, const pair<int, int>& n)
        {return m.second > n.second; } 
    };

    vector<int> topKFrequent(vector<int>& nums, int k) 
    {
        unordered_map<int, int> u_map;

        for(int i = 0; i < nums.size(); ++i) u_map[nums[i]]++;

        priority_queue<pair<int, int>, vector<pair<int, int>>, cmp> pri_que;

        for(unordered_map<int, int>::iterator it = u_map.begin(); it != u_map.end(); it++)
        {
            pri_que.push(*it);
            
            if(pri_que.size() > k) pri_que.pop();
        }
        
        vector<int> result(k);

        for(int i = k - 1; i >= 0; --i)
        {
            result[i] = pri_que.top().first;
            pri_que.pop();
        }

        return result;    
    }
};