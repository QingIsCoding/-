///回溯
class Solution
{
public:
    bool isValid(vector<string>& chessboard,int n, int row, int column)
    {
        //检查列方向
        for(int i = 0; i < row; ++i)
            if(chessboard[i][column] == 'Q') return false;

        //检查西北方向
        for(int i = row - 1, j = column - 1; i >= 0 && j >= 0; --i, --j)
            if(chessboard[i][j] == 'Q') return false;

        //检查东北方向
        for(int i = row - 1, j = column + 1; i >= 0 && j <= n - 1; --i, ++j)
            if(chessboard[i][j] == 'Q') return false;
        
        return true;
    }

    void backtracking(vector<string>& chessboard,int n, int row)
    {
        if(row == n)
        {
            res.push_back(chessboard);

            return;
        }

        for(int column = 0; column < n; ++column)
            if(isValid(chessboard, n, row, column))
            {
                chessboard[row][column] = 'Q';
                backtracking(chessboard, n, row + 1);
                chessboard[row][column] = '.';
            }
    }

    vector<vector<string>> solveNQueens(int n)
    {
        vector<string> chessboard(n, string(n, '.'));
        backtracking(chessboard, n, 0);

        return res;
    }
    
private:
    vector<vector<string>> res;
};