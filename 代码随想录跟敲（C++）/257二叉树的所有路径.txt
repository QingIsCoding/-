/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
//深度优先搜索
class Solution
{
public:
    //先序遍历
    void traversal(TreeNode* cur, string path, vector<string>& result)
    {
        path += to_string(cur->val);

        if(cur->left == nullptr && cur->right == nullptr)
        {
            result.push_back(path);
            return;
        }

        if(cur->left != nullptr)
        {
            path += "->";
            traversal(cur->left, path, result);
            path.pop_back();//回溯 '>'
            path.pop_back();//回溯 '-'
        }

        if(cur->right != nullptr)
        {
            path += "->";
            traversal(cur->right, path, result);
            path.pop_back();//回溯 '>'
            path.pop_back();//回溯 '-'
        }
    }

    vector<string> binaryTreePaths(TreeNode* root)
    {
        vector<string> result;
        string path;

        traversal(root, path, result);

        return result;
    }
};