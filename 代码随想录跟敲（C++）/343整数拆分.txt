//动态规划
/*
class Solution 
{
public:
    int integerBreak(int n) 
    {
        vector<int> dp(n + 1);
        dp[2] = 1;

        for(int i = 3; i <= n; ++i)
            //1.拆成两个正整数j和i-j时
            //偶数i=6最多拆成3和3: 1+5,2+4,3+3 相当于 4+2,5+1
            //奇数i=7最多拆成3和4: 1+6,2+5,3+4 相当于 4+3,5+2,6+1
            //最多把i/2拆出来即可
            for(int j = 1; j <= i / 2; ++j)
                //拆成三个及以上正整数时，已拆成j和i-j，再拆i-j即dp[i-j]
                //没有必要拆j的原因：
                //比如i=9: 1+8,2+7,3+6,4+5
                //1+8的1不能拆，2+7的2在1+8的dp[8](拆8)中出现过
                //3+6的3在1+8的dp[8](拆8)中 和 2+7的dp[7](拆7)中出现过
                dp[i] = max(dp[i], max(j * (i - j), j * dp[i - j]));
        
        return dp[n];
    }
};
*/
//优化的动态规划
/*
class Solution 
{
public:
    int integerBreak(int n) 
    {
        if(n <= 3) return n - 1;

        vector<int> dp(n + 1);
        dp[2] = 1;

        for(int i = 3; i <= n; ++i)
        {
            int max1 = max(2 * (i - 2), 2 * dp[i - 2]);
            int max2 = max(3 * (i - 3), 3 * dp[i - 3]);
            dp[i] = max(max1, max2);
        }

        return dp[n];
    }
};
*/
//数学
class Solution 
{
public:
    int integerBreak(int n) 
    {
        if(n <= 3) return n - 1;

        //商 
        int quotient = n / 3;
        //余数
        int remainder = n % 3;

        //pow函数返回值类型为double
        if(remainder == 0) return (int)pow(3, quotient);
        else if(remainder == 1) return (int)pow(3, quotient - 1) * 4;
        else return (int)pow(3, quotient) * 2;
    }
};