/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
//动态规划
class Solution
{
public:
    //0:不偷    1:偷
    vector<int> robTree(TreeNode* cur)
    {
        if(cur == nullptr) return {0, 0};

        vector<int> leftMax = robTree(cur->left);
        vector<int> rightMax = robTree(cur->right);

        //不偷cur:0
        //可偷左孩子:max(leftMax[0], leftMax[1])
        //可偷右孩子:max(rightMax[0], rightMax[1])
        int val0 = max(leftMax[0], leftMax[1]) + max(rightMax[0], rightMax[1]);
        //偷cur:cur->val
        //不偷左孩子:leftMax[0]
        //不偷右孩子:rightMax[0]
        int val1 = cur->val + leftMax[0] + rightMax[0];

        return {val0, val1};
    }

    int rob(TreeNode* root)
    {
        vector<int> res = robTree(root);

        return max(res[0], res[1]);
    }
};