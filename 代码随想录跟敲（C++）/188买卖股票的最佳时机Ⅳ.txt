//动态规划
class Solution
{
public:
    int maxProfit(int k, vector<int>& prices)
    {
        vector<vector<int>> dp(prices.size(), vector<int>(2 * k + 1));

        //dp[i][0]:不操作
        //dp[i][j](j为正奇数):第(j + 1) / 2次持有股票
        //dp[i][j](j为正偶数):第j / 2次不持有股票
        for(int j = 1; j < 2 * k; j += 2) dp[0][j] = -prices[0];

        for(int i = 1; i < prices.size(); ++i)
            for(int j = 0; j < 2 * k; j += 2)
            {
                dp[i][j + 1] = max(dp[i - 1][j + 1], dp[i - 1][j] - prices[i]);
                dp[i][j + 2] = max(dp[i - 1][j + 2], dp[i - 1][j + 1] + prices[i]);
            }
        
        return dp[prices.size() - 1][2 * k];
    }
};