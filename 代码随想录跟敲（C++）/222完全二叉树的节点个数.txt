/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
//二分查找 + 位运算
class Solution
{
public:
    int countNodes(TreeNode* root)
    {
        if(root == nullptr) return 0;

        TreeNode* left = root->left;
        TreeNode* right = root->right;
        //root在第0层
        int leftDepth = 0, rightDepth = 0;

        while(left)
        {
            left = left->left;
            leftDepth++;
        }

        while(right)
        {
            right = right->right;
            rightDepth++;
        }

        //深度为n的满二叉树有(2^(n + 1) - 1)个节点
        //2 << leftDepth = 2 * 2^n = 2^(n + 1)
        if(leftDepth == rightDepth) return (2 << leftDepth) - 1;

        return countNodes(root->left) + countNodes(root->right) + 1;
    }
};