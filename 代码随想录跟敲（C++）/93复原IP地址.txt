//回溯
class Solution
{
public:
    bool isValid(const string& s, int start, int end)
    {
        if(start > end) return false;
        if(s[start] == '0' && start != end) return false;

        int num = 0;

        for(int i = start; i <= end; ++i)
        {
            if(s[i] < '0' || s[i] > '9') return false;

            //字符串变数字 如255:2->25->255
            num = num * 10 + s[i] - '0';

            if(num > 255) return false;
        }

        return true;
    }

    void backtracking(string& s, int startIndex, int pointNum)
    {
        if(pointNum == 3)
        {
            if(isValid(s, startIndex, s.size() - 1)) res.push_back(s);

            return;
        }

        for(int i = startIndex; i < s.size(); ++i)
        {
            if(isValid(s, startIndex, i))
            {
                s.insert(s.begin() + i + 1, '.');
                ++pointNum;
                backtracking(s, i + 2, pointNum);
                --pointNum;
                s.erase(s.begin() + i + 1);
            }
            else break;
        }
    }

    vector<string> restoreIpAddresses(string s)
    {
        if(s.size() < 4 || s.size() > 12) return res;

        backtracking(s, 0, 0);

        return res;
    }
        
private:
    vector<string> res;
};