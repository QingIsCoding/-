//一次遍历
class Solution
{
public:
    int canCompleteCircuit(vector<int>& gas, vector<int>& cost)
    {
        int curSum = 0;
        int totalSum = 0;
        int start = 0;

        for(int i = 0; i < gas.size(); ++i)
        {
            curSum += gas[i] - cost[i];
            totalSum += gas[i] - cost[i];

            //一旦cumSum小于零，说明[0, i]区间都不能作为起始位置
            //因为这个区间选择任何一个位置作为起点，到i这里都会断油
            if(curSum < 0)
            {
                start = i + 1;
                curSum = 0;
            }
        }

        //totalSum >= 0:一定能跑完一圈
        if(totalSum < 0) return -1;

        //最终结果为start原因如下:
        //[start + 1, gas.size() - 1]其中之一x如果也能满足情况
        //start>>>...>>>x>>>...>>>gas.size() - 1>>>0>>>...>>>start - 1 
        //假设:[x, start - 1]的curSum 加上 [start, x - 1]的curSum 大于等于0
        //已知:[start, x - 1]的curSum大于等于0
        //那么:[x, start - 1]的curSum <= [x, start - 1]的curSum 加上 [start, x - 1]的curSum
        //从start开始比x开始是更优解
        //又由于如果存在解，则解唯一
        //则解就是从start开始
        return start;
    }
};