//排序 + 双指针
class Solution 
{
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) 
    {
        vector<vector<int>> result;
        sort(nums.begin(), nums.end());

        for(int k= 0; k < nums.size(); ++k)
        {
            //三个效果一样
            //while(nums[k] > target && nums[k] > 0 && target >= 0)
            //while(nums[k] > target && nums[k] > 0)
            if(nums[k] > target && target >= 0) break;

            if(k > 0 && nums[k] == nums[k - 1]) continue;

            for(int i = k + 1; i < nums.size(); ++i)
            {
                if(nums[k] + nums[i] > target && target >= 0) break;
                
                if(i > k + 1 && nums[i] == nums[i - 1]) continue;

                int left = i + 1;
                int right = nums.size() - 1;

                while(left < right)
                {
                    //if(nums[k] + nums[i] + nums[left] + nums[right] > target)会溢出
                    if((long)nums[k] + nums[i] + nums[left] + nums[right] > target) --right;
                    else if((long)nums[k] + nums[i] < target - nums[left] - nums[right]) ++left;
                    else
                    {
                        result.push_back(vector<int>{nums[k], nums[i], nums[left], nums[right]});
                        
                        while(left < right && nums[right] == nums[right - 1]) --right;
                        while(left < right && nums[left] == nums[left + 1]) ++left;

                        --right;
                        ++left;
                    }
                }
            } 
        }

        return result;
    }
};