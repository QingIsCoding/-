//动态规划
/*
class Solution 
{
public:
    int uniquePaths(int m, int n) 
    {
        vector<int> dp(n, 1);

        //i，m对应行
        //j，n对应列
        for(int i = 1; i < m; ++i)
            for(int j = 1; j < n; ++j)
                //dp[i][j] = dp[i - 1][j] + dp[i][j - 1]
                //对于右边的dp[j]，还未修改，相当于dp[i - 1][j]
                //对于右边的dp[j - 1]，已经修改，相当于dp[i][j - 1]
                //对于左边的dp[j]，准备被赋值，相当于dp[i][j]
                dp[j] += dp[j - 1];
            
        return dp[n - 1];
    }
};
*/
//组合数学
class Solution 
{
public:
    int uniquePaths(int m, int n) 
    {
        long long ans = 1;
        
        //ans = ans * j / i不能写成ans *= j / i
        //先算j / i会取整再乘以ans
        for(int i = 1, j = n; i < m; ++i, ++j) ans = ans * j / i;

        return ans;
    }
};