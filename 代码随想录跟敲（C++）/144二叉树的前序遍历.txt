/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
//递归
/*
class Solution 
{
public:
    void preorder(TreeNode* root, vector<int>& res)
    {
        if(root == nullptr) return;

        res.push_back(root->val);
        preorder(root->left, res);
        preorder(root->right, res);
    }

    vector<int> preorderTraversal(TreeNode* root) 
    {
        vector<int> res;
        preorder(root, res);

        return res;
    }
};
*/
//迭代
class Solution 
{
public:
    vector<int> preorderTraversal(TreeNode* root) 
    {
        stack<TreeNode*> stk;
        vector<int> res;
        
        if(root == nullptr) return res;

        stk.push(root);

        while(!stk.empty())
        {
            //前序遍历:根左右
            //入栈根，出栈根，入栈右(后出栈)，入栈左(先出栈)
            TreeNode* node = stk.top();//根
            stk.pop();
            res.push_back(node->val);

            if(node->right != nullptr) stk.push(node->right);//右
            if(node->left != nullptr) stk.push(node->left);//左
        }

        return res;
    }
};