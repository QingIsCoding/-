/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
//递归
class Solution
{
public:
    TreeNode* deleteNode(TreeNode* root, int key)
    {
        //1.没找到删除的节点，遍历到空节点直接返回
        if(root == nullptr) return root;

        //找到删除的节点
        if(root->val == key)
        {
            //2.左右孩子都为叶子节点，直接删除节点，返回nullptr为根节点
            if(root->left == nullptr && root->right == nullptr)
            {
                delete root;
                root = nullptr;

                return nullptr;
            }
            //3.其左孩子为空，右孩子不为空，删除节点，右孩子补位，返回右孩子为根节点
            else if(root->left == nullptr)
            {
                TreeNode* retNode = root->right;
                delete root;
                root = nullptr;

                return retNode;
            }
            //4.其右孩子为空，左孩子不为空，删除节点，左孩子补位，返回左孩子为根节点
            else if(root->right == nullptr)
            {
                TreeNode* retNode = root->left;
                delete root;
                root = nullptr;

                return retNode;
            }
            //5.左右孩子节点都不为空，将删除节点的左子树放到删除节点的右子树的最小孩子的位置
            //返回删除节点的右孩子为的根节点
            else
            {
                TreeNode* cur = root->right;

                while(cur->left != nullptr) cur = cur->left;

                cur->left = root->left;
                TreeNode* tmp = root;
                root = root->right;
                delete tmp;
                tmp = nullptr;

                return root;
            }
        }

        if(root->val > key) root->left = deleteNode(root->left, key);

        if(root->val < key) root->right = deleteNode(root->right, key);

        return root;
    }
};