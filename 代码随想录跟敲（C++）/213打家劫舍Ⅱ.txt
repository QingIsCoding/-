//动态规划
class Solution 
{
public:
    int robRange(vector<int>& nums, int start, int end)
    {
        if (start == end) return nums[start];

        vector<int> dp(nums.size());
        dp[start] = nums[start];
        dp[start + 1] = max(nums[start], nums[start + 1]);

        for(int i = start + 2; i <= end; ++i) dp[i] = max(dp[i - 1], dp[i - 2] + nums[i]);

        return dp[end];
    }

    int rob(vector<int>& nums) 
    {
        if(nums.size() == 1) return nums[0];

        //          0   1   2   ......   n-2    n-1
        //case1:    ×   √   √   ......   √      ×   考虑1~n-2       
        //case2:    √   √   √   ......   √      ×   考虑0~n-1
        //case3:    ×   √   √   ......   √      √   考虑1~n-1
        //case4:    √   √   √   ......   √      √   考虑0~n-1
        //case4舍去(不能首尾相连)，case2+case3包含了case1
        int result1 = robRange(nums, 0, nums.size() - 2);//case2
        int result2 = robRange(nums, 1, nums.size() - 1);//case3

        return max(result1, result2);
    }
};