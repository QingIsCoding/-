/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
//中序遍历，总是选择中间位置左边的数字作为根节点
class Solution
{
public:
    TreeNode* traversal(vector<int>& nums, int left, int right)
    {
        if (left > right) return nullptr;

        //(left + right) / 2
        int mid = left + (right - left >> 1);

        //长度为奇数时，选择中间位置的数字作为根节点
        //长度为偶数时，选择中间位置左边的数字作为根节点
        TreeNode* root = new TreeNode(nums[mid]);
        root->left = traversal(nums, left, mid - 1);
        root->right = traversal(nums, mid + 1, right);

        return root;
    }

    TreeNode* sortedArrayToBST(vector<int>& nums)
    {
        return traversal(nums, 0, nums.size() - 1);
    }
};