//动态规划
/*
class Solution 
{
public:
    int fib(int n) 
    {
        if(n <= 1) return n;

        //f(n) = f(n - 1) + f(n - 2)
        // r   =     p    +     q
        int p = 0, q = 1, r = 1;

        for(int i = 2; i <= n; ++i)
        {
            r = p + q;
            p = q;
            q = r;
        }        

        return r;
    }
};
*/
//矩阵快速幂
/*
class Solution 
{
public:
    vector<vector<int>> matrix_multiply(vector<vector<int>> &a, vector<vector<int>> &b)
    {
        vector<vector<int>> c(2, vector<int>(2));

        for(int i = 0; i < 2; ++i)
            for(int j = 0; j < 2; ++j)
                c[i][j] = a[i][0] * b[0][j] + a[i][1] * b[1][j];
        
        return c;
    }

    vector<vector<int>> matrix_pow(vector<vector<int>> &a, int n)
    {
        vector<vector<int>> ret{{1, 0}, {0, 1}};

        while(n > 0)
        {
            if(n & 1) ret = matrix_multiply(ret, a);

            a = matrix_multiply(a, a);
            n >>= 1;
        }

        return ret;
    }

    int fib(int n) 
    {
        if(n <= 1) return n;

        vector<vector<int>> q{{1, 1}, {1, 0}};
        vector<vector<int>> res = matrix_pow(q, n - 1);

        return res[0][0];
    }
};
*/
//通项公式
class Solution 
{
public:
    int fib(int n) 
    {
        double fibn = (pow((1 + sqrt(5)) / 2, n) - pow((1 - sqrt(5)) / 2, n)) / sqrt(5);
        
        return round(fibn);
    }
};