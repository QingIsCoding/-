/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
//递归
/*
class Solution 
{
public:
    void inorder(TreeNode* root, vector<int>& res)
    {
        if(root == nullptr) return;

        inorder(root->left, res);
        res.push_back(root->val);
        inorder(root->right, res);
    }

    vector<int> inorderTraversal(TreeNode* root)
    {
        vector<int> res;
        inorder(root, res);

        return res;
    }
};
*/
//迭代
class Solution 
{
public:
    vector<int> inorderTraversal(TreeNode* root)
    {
        vector<int> res;
        stack<TreeNode*> stk;
        TreeNode* cur = root;

        //遍历到空节点且栈为空时cur == nullptr && stk.empty()退出循环
        while(cur != nullptr || !stk.empty())
        {
            //遍历顺序:左根右
            //遍历到非空节点就往左走
            if(cur != nullptr)
            {
                stk.push(cur);
                cur = cur->left;
            }
            //最后遍历到空节点就出栈，再往右走
            else
            {
                cur = stk.top();
                stk.pop();
                res.push_back(cur->val);
                cur = cur->right;
            } 
        }

        return res;
    }
};