class Solution
{
public:
    bool isValid(vector<string>& matrix, int row, int column, int n)
    {
        for(int i = 0; i < row; ++i)
            if(matrix[i][column] == 'Q') return false;

        for(int i = row - 1, j = column - 1; i >= 0 && j >= 0; --i, --j)
            if(matrix[i][j] == 'Q') return false;
        
        for(int i = row - 1, j = column + 1; i >= 0 && j <= n - 1; --i, ++j)
            if(matrix[i][j] == 'Q') return false;
        
        return true;
    }

    void backtracking(vector<string>& matrix, int row, int n)
    {
        if(row == n)
        {
            res.push_back(matrix);

            return;
        }

        for(int column = 0; column < n; ++column)
            if(isValid(matrix, row, column, n))
            {
                matrix[row][column] = 'Q';
                backtracking(matrix, row + 1, n);
                matrix[row][column] = '.';
            }
    }

    vector<vector<string>> solveNQueens(int n)
    {
        vector<string> matrix(n, string(n, '.'));
        backtracking(matrix, 0, n);

        return res;
    }

private:
    vector<vector<string>> res;
};