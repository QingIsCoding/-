class Solution
{
public:
    bool isValid(vector<vector<char>>& board, int row, int column, int val)
    {
        for(int i = 0; i < 9; ++i)
            if(board[i][column] == val) return false;
        
        for(int j = 0; j < 9; ++j)
            if(board[row][j] == val) return false;
        
        for(int i = row / 3 * 3; i < row / 3 * 3 + 3; ++i)
            for(int j = column / 3 * 3; j < column / 3 * 3 + 3; ++j)
                if(board[i][j] == val) return false;
        
        return true;
    }

    bool backtracking(vector<vector<char>>& board)
    {
        for(int i = 0; i < 9; ++i)
            for(int j = 0; j < 9; ++j)
            {
                if(board[i][j] != '.') continue;
                    
                for(char ch = '1'; ch <= '9'; ++ch)
                    if(isValid(board, i, j, ch))
                    {
                        board[i][j] = ch;

                        if(backtracking(board)) return true;

                        board[i][j] = '.';
                    }

                return false;
            }

        return true;
    }

    void solveSudoku(vector<vector<char>>& board)
    {
        backtracking(board);
    }
};