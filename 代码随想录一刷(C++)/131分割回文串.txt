class Solution
{
public:
    void computePalindrome(const string& s)
    {
        isPalindrome.resize(s.size(), vector<bool>(s.size(), false));

        for(int i = s.size() - 1; i >= 0; --i)
            for(int j = i; j <= s.size() - 1; ++j)
                if(s[i] == s[j])
                    if(j - i <= 1 || isPalindrome[i + 1][j - 1]) isPalindrome[i][j] = true;
    }

    void backtracking(const string& s, int startIndex)
    {
        if(startIndex == s.size())
        {
            res.push_back(path);

            return;
        }

        for(int i = startIndex; i < s.size(); ++i)
            if(isPalindrome[startIndex][i])
            {
                path.push_back(s.substr(startIndex, i - startIndex + 1));
                backtracking(s, i + 1);
                path.pop_back();
            }
    }

    vector<vector<string>> partition(string s)
    {
        computePalindrome(s);
        backtracking(s, 0);

        return res;
    }

private:
    vector<vector<string>> res;
    vector<string> path;
    vector<vector<bool>> isPalindrome;
};