/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution
{
public:
    void traversal(TreeNode* node, string path, vector<string>& res)
    {
        path += to_string(node->val);

        if(node->left == nullptr && node->right == nullptr)
        {
            res.push_back(path);
            
            return;
        }

        if(node->left != nullptr) traversal(node->left, path + "->", res);

        if(node->right != nullptr) traversal(node->right, path + "->", res);
    }

    vector<string> binaryTreePaths(TreeNode* root)
    {
        vector<string> res;
        string path;
        traversal(root, path, res);

        return res;
    }
};