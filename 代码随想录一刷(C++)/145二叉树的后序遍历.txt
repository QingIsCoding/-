/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
/*
class Solution
{
public:
    void postorder(TreeNode* root, vector<int>& res)
    {
        if(root == nullptr) return;

        postorder(root->left, res);
        postorder(root->right, res);
        res.push_back(root->val);
    }

    vector<int> postorderTraversal(TreeNode* root)
    {
        vector<int> res;
        postorder(root, res);

        return res;
    }
};
*/
class Solution
{
public:
    vector<int> postorderTraversal(TreeNode* root)
    {
        vector<int> res;
        stack<TreeNode*> stk;

        if(root == nullptr) return res;

        stk.push(root);

        while(!stk.empty())
        {
            TreeNode* node = stk.top();
            stk.pop();
            res.push_back(node->val);

            if(node->left != nullptr) stk.push(node->left);

            if(node->right != nullptr) stk.push(node->right);
        }

        reverse(res.begin(), res.end());

        return res;
    }
};