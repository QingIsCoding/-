/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution
{
public:
    int traversal(TreeNode* cur)
    {
        //1:有摄像头+有监控
        //2:无摄像头+有监控
        //3:无摄像头+无监控
        if(cur == nullptr) return 2;

        int left = traversal(cur->left);
        int right = traversal(cur->right);

        if
        (
            (left == 3 && right == 1) ||
            (left == 3 && right == 2) ||
            (left == 3 && right == 3) ||
            (left == 1 && right == 3) ||
            (left == 2 && right == 3)
        )
        {
            ++res;
            
            return 1;
        }

        if
        (
            (left == 1 && right == 1) ||
            (left == 1 && right == 2) ||
            (left == 2 && right == 1)
        ) return 2;

        if
        (
            (left == 2 && right == 2)
        ) return 3;

        return -1;
    }

    int minCameraCover(TreeNode* root)
    {
        if(traversal(root) == 3) ++res;

        return res;
    }

private:
    int res = 0;
};