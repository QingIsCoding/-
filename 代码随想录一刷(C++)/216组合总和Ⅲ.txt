class Solution
{
public:
    void backtracking(int k, int n, int startIndex, int curSum)
    {
        if(curSum > n) return;

        if(path.size() == k)
        {
            if(curSum == n)
            {
                res.push_back(path);

                return;
            }
        }

        for(int i = startIndex; i <= 10 + path.size() - k; ++i)
        {
            curSum += i;
            path.push_back(i);
            backtracking(k, n, i + 1, curSum);
            path.pop_back();
            curSum -= i;
        }
    }

    vector<vector<int>> combinationSum3(int k, int n)
    {
        backtracking(k, n, 1, 0);

        return res;
    }

private:
    vector<vector<int>> res;
    vector<int> path;
};