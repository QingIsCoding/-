class Solution
{
public:
    void backtracking(vector<int>& candidates, int target, int startIndex, int curSum)
    {
        if(curSum > target) return;

        if(curSum == target)
        {
            res.push_back(path);
            
            return;
        }

        for(int i = startIndex; i < candidates.size(); ++i)
        {
            path.push_back(candidates[i]);
            curSum += candidates[i];
            backtracking(candidates, target, i, curSum);
            curSum -= candidates[i];
            path.pop_back();
        }
    }

    vector<vector<int>> combinationSum(vector<int>& candidates, int target)
    {
        backtracking(candidates, target, 0, 0);

        return res;
    }

private:
    vector<vector<int>> res;
    vector<int> path;
};