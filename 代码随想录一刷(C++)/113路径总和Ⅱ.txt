/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution
{
public:
    void traversal(TreeNode* node, int count)
    {
        if(node->left == nullptr && node->right == nullptr && count == 0)
        {
            res.push_back(path);

            return;
        }

        if(node->left == nullptr && node->right == nullptr) return;

        if(node->left != nullptr)
        {
            path.push_back(node->left->val);
            traversal(node->left, count - node->left->val);
            path.pop_back();
        }

        if(node->right != nullptr)
        {
            path.push_back(node->right->val);
            traversal(node->right, count - node->right->val);
            path.pop_back();
        }

        return;
    }

    vector<vector<int>> pathSum(TreeNode* root, int targetSum)
    {
        if(root == nullptr) return res;
        
        path.push_back(root->val);
        traversal(root, targetSum - root->val);

        return res;
    }

private:
    vector<int> path;
    vector<vector<int>> res;
};