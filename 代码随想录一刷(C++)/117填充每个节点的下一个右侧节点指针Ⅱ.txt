/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* left;
    Node* right;
    Node* next;

    Node() : val(0), left(NULL), right(NULL), next(NULL) {}

    Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) {}

    Node(int _val, Node* _left, Node* _right, Node* _next)
        : val(_val), left(_left), right(_right), next(_next) {}
};
*/

class Solution
{
public:
    Node* connect(Node* root)
    {
        if(root == nullptr) return root;

        deque<Node*> deq;
        deq.push_back(root);

        while(!deq.empty())
        {
            int currentLevelSize = deq.size();
            Node* pre;
            Node* cur;

            for(int i = 0; i < currentLevelSize; ++i)
            {
                cur = deq.front();
                deq.pop_front();

                if(i == 0) pre = cur;
                else
                {
                    pre->next = cur;
                    pre = cur;
                }

                if(cur->left != nullptr) deq.push_back(cur->left);

                if(cur->right != nullptr) deq.push_back(cur->right);
            }
        }

        return root;
    }
};