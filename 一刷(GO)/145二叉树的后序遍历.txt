/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
/*func postorderTraversal(root *TreeNode) []int {
    ans := make([]int, 0)
    if root == nil {
        return ans
    }
    var postorder func(node *TreeNode)
    postorder = func(node *TreeNode) {
        if node == nil {
            return
        }
        postorder(node.Left)
        postorder(node.Right)
        ans = append(ans, node.Val)
    }
    postorder(root)
    return ans
}*/
func postorderTraversal(root *TreeNode) []int {
    ans := make([]int, 0)
    if root == nil {
        return ans
    }
    stack := []*TreeNode{root}
    for len(stack) != 0 {
        node := stack[len(stack)-1]
        stack = stack[:len(stack)-1]
        ans = append(ans, node.Val)
        if node.Left != nil {
            stack = append(stack, node.Left)
        }
        if node.Right != nil {
            stack = append(stack, node.Right)
        }
    }
    for i := 0; i < len(ans) / 2; i++ {
        ans[i], ans[len(ans)-i-1] = ans[len(ans)-i-1], ans[i]
    }
    return ans
}