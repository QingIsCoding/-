func maxProfit(k int, prices []int) int {
    length := len(prices)
    m := 2 * k
    //dp[i][0]:不操作
    //dp[i][j](j为正奇数):第(j + 1) / 2次持有股票
    //dp[i][j](j为正偶数):第j / 2次不持有股票
    dp := make([][]int, length)
    for i := range dp {
        dp[i] = make([]int, m + 1)
    }
    for j := 1; j < m; j++ {
        dp[0][j] = -prices[0]
    }
    for i := 1; i < length; i++ {
        for j := 1; j <= m; j += 2 {
            dp[i][j] = max(dp[i-1][j], dp[i][j-1] - prices[i])
            dp[i][j+1] = max(dp[i-1][j+1], dp[i][j] + prices[i])
        }
    }
    return dp[length-1][m]
}