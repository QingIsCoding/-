/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func buildTree(inorder []int, postorder []int) *TreeNode {
    if len(postorder) == 0 {
        return nil
    }
    rootValue := postorder[len(postorder)-1]
    root := &TreeNode{rootValue, nil, nil}
    if len(postorder) == 1 {
        return root
    }
    var rootIndex int
    for rootIndex = 0; rootIndex < len(inorder); rootIndex++ {
        if inorder[rootIndex] == rootValue {
            break
        }
    }
    leftInorder := inorder[:rootIndex]
    rightInorder := inorder[rootIndex+1:]
    leftPostorder := postorder[:len(leftInorder)]
    rightPostorder := postorder[len(leftInorder):len(postorder)-1]
    root.Left = buildTree(leftInorder, leftPostorder)
    root.Right = buildTree(rightInorder, rightPostorder)
    return root
}