/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
/*func inorderTraversal(root *TreeNode) []int {
    ans := make([]int, 0)
    var inorder func(node *TreeNode)
    inorder = func(node *TreeNode) {
        if node == nil {
            return
        }
        inorder(node.Left)
        ans = append(ans, node.Val)
        inorder(node.Right)
    }
    inorder(root)
    return ans
}*/
func inorderTraversal(root *TreeNode) []int {
    ans := make([]int, 0)
    stack := make([]*TreeNode, 0)
    node := root
    if root == nil {
        return ans
    }
    for node != nil || len(stack) != 0 {
        if node != nil {
            stack = append(stack, node)
            node = node.Left
        } else {
            node = stack[len(stack)-1]
            stack = stack[:len(stack)-1]
            ans = append(ans, node.Val)
            node = node.Right
        }
    }
    return ans
}