/**
 * Definition for a Node.
 * type Node struct {
 *     Val int
 *     Left *Node
 *     Right *Node
 *     Next *Node
 * }
 */

func connect(root *Node) *Node {
	if root == nil {
        return root
    }
    queue := []*Node{root}
    var pre, cur *Node
    for len(queue) != 0 {
        currentLevelSize := len(queue)
        for i := 0; i < currentLevelSize; i++ {
            cur = queue[0]
            queue = queue[1:]
            if i == 0 {
                pre = cur
            } else {
                pre.Next = cur
                pre = cur
            }
            if cur.Left != nil {
                queue = append(queue, cur.Left)
            }
            if cur.Right != nil {
                queue = append(queue,cur.Right)
            }
        }
    }
    return root
}