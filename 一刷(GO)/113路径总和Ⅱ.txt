/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func pathSum(root *TreeNode, targetSum int) [][]int {
    ans := make([][]int, 0)
    path := make([]int, 0)
    var traversal func(node *TreeNode, remain int)
    traversal = func(node *TreeNode, remain int) {
        if node == nil {
            return
        }
        path = append(path, node.Val)
        remain -= node.Val
        if node.Left == nil && node.Right == nil && remain == 0 {
            temp := make([]int, len(path))
            copy(temp, path)
            ans = append(ans, temp)
        }
        traversal(node.Left, remain)
        traversal(node.Right, remain)
        path = path[:len(path)-1]
    }
    traversal(root, targetSum)
    return ans
}