func permuteUnique(nums []int) [][]int {
	var ans [][]int
	var path []int
	used := make([]bool, len(nums))
	sort.Ints(nums)

	var backtracking func(nums []int, used []bool)
	backtracking = func(nums []int, used []bool) {
		if len(path) == len(nums) {
			temp := make([]int, len(path))
			copy(temp, path)
			ans = append(ans, temp)
			return
		}
		for i := 0; i < len(nums); i++ {
			if i > 0 && nums[i] == nums[i-1] && !used[i-1] {
				continue
			}
			if used[i] == false {
				path = append(path, nums[i])
				used[i] = true
				backtracking(nums, used)
				used[i] = false
				path = path[:len(path)-1]
			}
		}
	}
	backtracking(nums, used)
	return ans
}