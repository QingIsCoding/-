func partition(s string) [][]string {
	var ans [][]string
	var path []string
	length := len(s)
	isPalindrome := make([][]bool, length)
	for i := range isPalindrome {
		isPalindrome[i] = make([]bool, length)
	}
	var computePalindrome func(s string)
	computePalindrome = func(s string) {
		for i := length - 1; i >= 0; i-- {
			for j := i; j <= length - 1; j++ {
                if s[i] == s[j]{
                    if j-i <= 1 || isPalindrome[i+1][j-1] {
                        isPalindrome[i][j] = true
				    }
                }
			}
		}
	}
    var backtracking func(s string, startIndex int)
    backtracking = func(s string, startIndex int) {
        if startIndex == length {
            temp := make([]string, len(path))
            copy(temp, path)
            ans = append(ans, temp)
            return
        }
        for i := startIndex; i < length; i++ {
            if isPalindrome[startIndex][i] {
                path = append(path, s[startIndex:i+1])
                backtracking(s, i + 1)
                path = path[:len(path)-1]
            }
        }
    }
    computePalindrome(s)
    backtracking(s, 0)
    return ans
}