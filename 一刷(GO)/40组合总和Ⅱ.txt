func combinationSum2(candidates []int, target int) [][]int {
	var ans [][]int
	var path []int
	used := make([]bool, len(candidates))
	sort.Ints(candidates)
	var backtracking func(candidates []int, target, startIndex, curSum int)
	backtracking = func(candidates []int, target, startIndex, curSum int) {
		if curSum > target {
			return
		}
		if curSum == target {
			temp := make([]int, len(path))
			copy(temp, path)
			ans = append(ans, temp)
			return
		}
		for i := startIndex; i < len(candidates); i++ {
			if i > 0 && candidates[i] == candidates[i-1] && used[i-1] == false {
				continue
			}
			path = append(path, candidates[i])
			curSum += candidates[i]
			used[i] = true
			backtracking(candidates, target, i+1, curSum)
			used[i] = false
			curSum -= candidates[i]
			path = path[:len(path)-1]
		}
	}
	backtracking(candidates, target, 0, 0)
	return ans
}